package com.example.demo.resource;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.WebRequest;

import com.example.demo.event.RecursoCriadoEvento;
import com.example.demo.exception.PessoaInactivaException;
import com.example.demo.exceptionHandler.ExceptionHandler.Erro;
import com.example.demo.model.Lancamento;
import com.example.demo.model.Pessoa;
import com.example.demo.repository.LancamentosRepository;
import com.example.demo.repository.filter.LancamentoFilter;
import com.example.demo.resource.projection.ResumoLancamento;
import com.example.demo.service.LancamentoService;
import com.example.demo.service.PessoaService;

@RestController
@RequestMapping("/lancamentos")
public class LancamentoResource implements Serializable {

	private static final long serialVersionUID = 1L;

	@Autowired
	private LancamentosRepository lancamentosRepository;

	@Autowired
	LancamentoService lancamentoService;

	@Autowired
	private ApplicationEventPublisher applicationEventPublisher;

	@GetMapping
	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public Page<Lancamento> pesquisar(LancamentoFilter filter,Pageable  pageable) {
		return lancamentosRepository.filtrar(filter,pageable);
	}
	

	@GetMapping(params = "resumo")
	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public Page<ResumoLancamento> resumir(LancamentoFilter lancamentoFilter, Pageable pageable) {
		return lancamentosRepository.resumir(lancamentoFilter, pageable);
	}

	@PostMapping
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_LANCAMENTO') and #oauth2.hasScope('write')")
	public ResponseEntity<Lancamento> criar(@Valid @RequestBody Lancamento lancamento, HttpServletResponse response) {
		Lancamento lancamentoSalva = lancamentoService.salvar(lancamento);
		applicationEventPublisher.publishEvent(new RecursoCriadoEvento(this, response, lancamentoSalva.getCodigo()));
		return ResponseEntity.status(HttpStatus.CREATED).body(lancamentoSalva);
	}

	@GetMapping("/{codigo}")
	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public ResponseEntity<?> buscarPeloCodigo(@PathVariable Long codigo) {

		Optional<Lancamento> lancamento = lancamentosRepository.findById(codigo);

		if (lancamento.isPresent()) {

			return ResponseEntity.ok().body(lancamento);
		}

		return ResponseEntity.notFound().build();

	}

	@DeleteMapping("/{codigo}")
	@PreAuthorize("hasAuthority('ROLE_REMOVER_LANCAMENTO') and #oauth2.hasScope('write')")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long codigo) {

		lancamentosRepository.deleteById(codigo);

	}

	@PutMapping("/{codigo}")
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_LANCAMENTO') and #oauth2.hasScope('write')")
	public ResponseEntity<Lancamento> actualizar(@PathVariable Long codigo, @Valid @RequestBody Lancamento lancamento) {
		Lancamento lancamentoSalva = lancamentoService.actualizar(codigo, lancamento);
		return ResponseEntity.ok().body(lancamentoSalva);
	}


	@org.springframework.web.bind.annotation.ExceptionHandler({ PessoaInactivaException.class })
	public ResponseEntity<Object> handlePessoaInactivaException(PessoaInactivaException ex) {

		String devMessage = ex.toString();
		List<Erro> erros = Arrays.asList(new Erro("Pessoa Inactiva", devMessage));
		return ResponseEntity.badRequest().body(erros);

	}

}
