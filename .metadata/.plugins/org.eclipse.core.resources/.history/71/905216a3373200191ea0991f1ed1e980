package com.example.demo.resource;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.event.RecursoCriadoEvento;
import com.example.demo.model.Categoria;
import com.example.demo.repository.CategoriasRepository;

@RestController
@RequestMapping("/categorias")
public class CategoriaResource implements Serializable {

	private static final long serialVersionUID = 1L;

	@Autowired
	private CategoriasRepository categoriasRepository;

	@Autowired
	private ApplicationEventPublisher applicationEventPublisher;

	@GetMapping
//	@PreAuthorize("hasAuthority('ROLE_PESQUISAR_CATEGORIA')")	
	public List<Categoria> listar() {
		return categoriasRepository.findAll();
	}

	@PostMapping
	public ResponseEntity<Categoria> criar(@Valid @RequestBody Categoria categoria, HttpServletResponse response) {
		Categoria categoriaSalva = categoriasRepository.save(categoria);
		applicationEventPublisher.publishEvent(new RecursoCriadoEvento(this, response, categoria.getCodigo()));
		return ResponseEntity.status(HttpStatus.CREATED).body(categoriaSalva);
	}

	@GetMapping("/{codigo}")
	public ResponseEntity<?> buscarPeloCodigo(@PathVariable Long codigo) {
		Optional<Categoria> categoria = categoriasRepository.findById(codigo);

		if (categoria.isPresent()) {

			return ResponseEntity.ok().body(categoria);
		}

		return ResponseEntity.notFound().build();
	}
	
	
	

}
